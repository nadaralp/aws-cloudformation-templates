# Dzzaa

##
## Template TODO:
#0. Receive SecretsManager path in parameters and use !Join to add them.
# Example: !Join ['', ['{{resolve:secretsmanager:', !Ref MyRDSInstanceRotationSecret, ':SecretString:username}}' ]]
#1. Create custom resource to clear s3 bucket when deleting the project
#2. SNS Topic to send approval message
#3. EventBridge rule + lambda to notify when CodePipeline was successful or failed -> Participants list

# Author: Nadar Alpenidze
##

# Insights section
# 1. To trigger the codepipeline you need to regitser a github webhook to it !!!!
# 2. CodePipeline itself doesn't have logs. It uses CodeBuilds log groups
# 3. Logical ID is the name of the resource in our template
# 4. AWS adds 3 tags by default with CloudFormation: aws:cloudformation:stack-name, aws:cloudformation:logical-id and aws:cloudformation:stack-id
# 5. You can give permissions with wildcards. Like s3:Get*
# 6. For Nested Stack, your CloudFormation template should live in s3 bucket
# 7. You can also give Principal: * to allow all type of principles.

# Conventions Built:
# 1. Always start the Resource Logical ID with the Resource Type.
# 2. S3 buckets and CloudFormation stack names are lower-kebab-case. All other resources are {StackName}-PascalCaseExplanation

# Bugs:
# 1. Serverless running in CodeBuild has no permission to deploy



AWSTemplateFormatVersion: "2010-09-09"
Description: "CI-CD Template fully integrated with GitHub"

Parameters:
  # ProjectName:
  #   Description: Your project name. Will be used to name the resources created with that cloudformation
  #   Type: String

  CodeBuildImage:
    Description: code build image
    Type: String
    Default: aws/codebuild/standard:5.0

  GitHubRepo:
    Description: GitHub repository name
    Type: String

  GitHubOwner:
    Description: GitHub Repo Owner
    Type: String

  TriggerBranch:
    Description: Branch to trigger Pipeline on. PR's and Merges
    Type: String

  ENVNAME:
    Description: To what environment to deploy (dev/qa/prod)
    Type: String
    AllowedValues:
      - "prod"
      - "qa"
      - "dev"

  IsManualApprovalStepActive:
    Description: Specify whether you want manual approval before running the deploy step
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"


Conditions:
  IsManualApproval:
      !Equals [!Ref IsManualApprovalStepActive, "true"]

  # IsDevEnvironment:
  #   !Equals [!Ref ENVNAME, "dev"]

Resources:
  # Role for CodeBuild
  IAMRoleForBuildCodeBuild:
    Type: AWS::IAM::Role
    Properties:
      # Tags: {}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-BuildCodeBuildRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LogsPermissions
                Effect: "Allow"
                Action:
                  - "cloudwatch:*"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt LogGroupForBuild.Arn
              - Sid: S3ReadPermissions
                Effect: Allow
                Action:
                  - "s3:List*"
                  - "s3:Get*"
                Resource:
                  - !Sub ${S3BucketPipelineArtifacts.Arn}/*
                  - !GetAtt S3BucketPipelineArtifacts.Arn

  IAMRoleForDeployCodeBuild: #We use CodeBuild for Deploy step
    Type: AWS::IAM::Role
    Properties:
      # Tags: {}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-DeployCodeBuildRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LogsPermissions
                Effect: "Allow"
                Action:
                  - "cloudwatch:*"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt LogGroupForDeploy.Arn
              - Sid: S3ReadPermissions
                Effect: Allow
                Action:
                  - "s3:List*"
                  - "s3:Get*"
                Resource:
                  - !Sub ${S3BucketPipelineArtifacts.Arn}/*
                  - !GetAtt S3BucketPipelineArtifacts.Arn
              - Sid: SlsDeployPermissions
                Effect: Allow
                Action:
                  - "cloudformation:*"
                  - "s3:*"
                  - "execute-api:*" #Not sure if needed actually
                  - "apigateway:*"
                  - "iam:*"
                  - "logs:*"
                  - "cloudwatch:*"
                  - "lambda:*"
                Resource:
                  - "*" #I should restrict it to resources containing the string serverless
                
  # Source Credentials to specify OAuth tokens for your GitHub/BitBucket provider
  CodeBuildSourceCredential:
    Type: AWS::CodeBuild::SourceCredential
    Properties:
      AuthType: PERSONAL_ACCESS_TOKEN
      ServerType: GITHUB
      Token: "{{resolve:secretsmanager:github_secrets:SecretString:AWS_CI_CD_GITHUB}}"

  LogGroupForBuild:
    Type: AWS::Logs::LogGroup
    Properties: 
      # KmsKeyId: String
      LogGroupName: !Sub ${AWS::StackName}-CICDBuildLogs
      RetentionInDays: 14

  LogGroupForDeploy:
    Type: AWS::Logs::LogGroup
    Properties: 
      # KmsKeyId: String
      LogGroupName: !Sub ${AWS::StackName}-CICDDeployLogs
      RetentionInDays: 14

  # The CodeBuild project
  CodeBuildBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-CodeBuildBuildProject
      ServiceRole: !GetAtt IAMRoleForBuildCodeBuild.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodeBuildImage
      Source:
        Type: GITHUB
        Location: !Sub https://github.com/${GitHubOwner}/${GitHubRepo}.git
        BuildSpec: buildspec.yml
        Auth:
          Type: OAUTH
          Resource: !Ref CodeBuildSourceCredential
      TimeoutInMinutes: 10
      Triggers:
        Webhook: true #Webhooks allow you to build or set up integrations
        FilterGroups:
          - - Type: EVENT
              Pattern: PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED, PULL_REQUEST_REOPENED
            - Type: BASE_REF
              Pattern: !Sub ^refs/heads/${TriggerBranch}$
              ExcludeMatchedPattern: false
        # - - Type: EVENT
        #     Pattern: PUSH
        #   - Type: HEAD_REF
        #     Pattern: ^refs/heads/.*
        #   - Type: FILE_PATH
        #     Pattern: READ_ME
        #     ExcludeMatchedPattern: true
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref LogGroupForBuild
          Status: ENABLED
      # Tags: {}

 # The CodeBuild Deploy project - We use CodeBuild to run CLI commands to deploy our serverless application
  CodeBuildDeployProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-CodeBuildDeployProject
      ServiceRole: !GetAtt IAMRoleForDeployCodeBuild.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodeBuildImage
        EnvironmentVariables:
          - Name: ENV_NAME
            Value: !Ref ENVNAME
      Source:
        Type: CODEPIPELINE
        BuildSpec: deployspec.yml
      TimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref LogGroupForDeploy
          Status: ENABLED
      # Tags: {}

  IAMRoleForCodePipeline:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ["sts:AssumeRole"]
            Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CodeBuildPermissions
                Effect: "Allow"
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource:
                  - !GetAtt CodeBuildBuildProject.Arn
                  - !GetAtt CodeBuildDeployProject.Arn
              - Sid: S3Permissions
                Effect: Allow
                Action:
                  - "s3:List*"
                  - "s3:Get*"
                  - "s3:PutObject"
                Resource:
                  - !Sub ${S3BucketPipelineArtifacts.Arn}/*
                  - !GetAtt S3BucketPipelineArtifacts.Arn
      # Tags: {}

  # Artifact store bucket
  S3BucketPipelineArtifacts:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-pipeline-artifacts #Bucket can't contain upper case letters
      # VersioningConfiguration:
      #   Status: Enabled

  # GitHub WebHook to trigger the pipeline
  CodePipelineGitHubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Name: !Sub ${AWS::StackName}-GitHubWebHook
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: "{{resolve:secretsmanager:github_secrets:SecretString:AWS_CI_CD_GITHUB}}"
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
        # - JsonPath: $.repository.name
        #   MatchEquals: '{Repo}'
      TargetPipeline: !Ref CodePipeline
      TargetAction: SourceAction
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      RegisterWithThirdParty: true

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AWS::StackName}-CodePipeline
      RoleArn: !GetAtt IAMRoleForCodePipeline.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3BucketPipelineArtifacts
      Stages:
      - Name: Source
        Actions:
          - 
            Name: SourceAction
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Provider: GitHub
              Version: '1'
            Configuration:
              Owner: !Ref GitHubOwner
              Repo: !Ref GitHubRepo
              Branch: !Ref TriggerBranch
              PollForSourceChanges: false #To use GitHub webhooks
              OAuthToken: "{{resolve:secretsmanager:github_secrets:SecretString:AWS_CI_CD_GITHUB}}"
            RunOrder: 1
            OutputArtifacts:
              - Name: SourceStepArtifacts
      - Name: Build
        Actions:
          -
            Name: BuildAction
            ActionTypeId:
              Category: Build
              Owner: AWS
              Provider: CodeBuild
              Version: '1'
            Configuration:
              ProjectName: !Ref CodeBuildBuildProject
            InputArtifacts:
              - Name: SourceStepArtifacts
            OutputArtifacts:
              - Name: BuildStepArtifacts

      - !If
        - IsManualApproval
        - Name: ManualApproval
          Actions:
            -
              Name: ApprovalAction
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration: {}
                # NotificationArn: <<arn>> #TODO: add
              InputArtifacts: []
              RunOrder: 1
        - !Ref AWS::NoValue

      - Name: Deploy
        Actions:
          -
            Name: DeployAction
            ActionTypeId:
              Category: Build
              Owner: AWS
              Provider: CodeBuild
              Version: '1'
            Configuration:
              ProjectName: !Ref CodeBuildDeployProject
            InputArtifacts:
              # - Name: BuildStepArtifacts
              - Name: SourceStepArtifacts